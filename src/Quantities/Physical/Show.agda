module Quantities.Physical.Show where

open import Quantities.Physical.Base
open import Data.Nat
open import Data.Rational renaming (show to deprecated-show)
open import Data.Bool
open import Data.Rational.Show using () renaming (show to ‚Ñöshow)
open import Data.Integer.Show using () renaming (show to ‚Ñ§show)
open import Data.String.Base using (String; _++_)
open import Quantities.Units.Composed.Show using () renaming (show to showùïås)
open import Data.Vec.Base renaming (_++_ to somethingelse)
open import Relation.Binary.PropositionalEquality

-- show function for the Physical Quantities type.
-- It prints the number either as a ‚Ñö (if the numerator is ‚â† 1)
-- or as a ‚Ñ§,
-- then it prints the dimension using the show function from
-- Quantities.Units.Composed.Show

show-vec : {n : ‚Ñï} ‚Üí (vec : Vec ‚Ñö n) ‚Üí String
show-vec [] = ""
show-vec (v ‚à∑ V) with denominator-is-one v
  where
    denominator-is-one : (q : ‚Ñö) ‚Üí Bool
    denominator-is-one q with (‚Ñïisone (‚Ñö.denominator‚Ñï q) )
      where
        ‚Ñïisone : (n : ‚Ñï) ‚Üí Bool
        ‚Ñïisone zero          = false
        ‚Ñïisone (suc zero)    = true
        ‚Ñïisone (suc (suc n)) = false
    ...| bool = bool
...| false = (‚Ñöshow v) ++ ", " ++(show-vec V)
...| true  = ‚Ñ§show (‚Ñö.numerator v) ++ ", " ++ (show-vec V)

show : (pq : PQ) ‚Üí String
show pq = "(" ++ (show-vec (PQ.vector pq)) ++ ")  [" ++ (showùïås (PQ.units pq)) ++ "]"


str1 = show quantity1
str2 = show quantity2
str3 = show quantity3

str12 = show q12

