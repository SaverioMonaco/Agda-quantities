-------------------------------
-- TUTORIAL: Natural Numbers --
-------------------------------

open import Data.Nat.Base

-- Here we define some natural numbers for quicker testings
one   = Data.Nat.Base.suc zero
two   = Data.Nat.Base.suc one
three = Data.Nat.Base.suc two
four  = Data.Nat.Base.suc three
five  = Data.Nat.Base.suc four

-- However, the arabic numbers are defined upon importing
-- Data.Nat.Base, you can try it:
-- >> Ctrl-C + Ctrl-N
-- >> 1 + 99
-- Output: 100

--Halving function (rounded up)
half : ℕ → ℕ
half zero = zero            -- 0 / 2 = 0
half (suc zero) = suc zero  -- 1 / 2 = 0.5 → 1
half (suc n) = suc (half n) -- (n + 1)/2 = n/2 + 1  

-- We can define the same using arabic numbers
half' : ℕ → ℕ
half' 0 = 0
half' (suc 0) = 1
half' (suc n) = suc (half n)

_add_ : ℕ → ℕ → ℕ
a add zero = a
a add suc b = suc (a add b) -- a + (b + 1) = 1 + (a + b)


open import Relation.Binary.PropositionalEquality.Core

helper : (n : ℕ) → n ≡ n + zero
helper zero = refl
helper (suc n) = cong suc (helper n)

helper' : (n m : ℕ) → n + suc m


same-thing : (n m : ℕ) → n add m ≡ n + m
same-thing n zero = helper n
same-thing n (suc m) = {!!}

-- same-thing zero (suc m) = cong suc (helper' m)
-- same-thing (suc n) (suc m) = {!!}
